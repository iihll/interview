/* 
  思想
  在对问题求解时，总是做出在当前看来是最好的选择。也就是说，
  不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解最优解
*/

/* 
  剪绳子  

  给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），
  每段绳子的长度记为 k[0],k[1]...k[m] 。请问 k[0]k[1]...*k[m] 可能的最大乘积是多少？
  例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
*/
/**
 * 
 * @param {Number} n 
 * @returns 
 */
const cuttingRope = n => {
  if(n === 2 || n === 3) return n - 1
  let a = n % 3
  let b = parseInt(n / 3)
  if(a === 0) {
    return 3 ** b
  } else if(a === 1) {
    return 2 * 2 * (3 ** (b - 1))
  } else {
    return 2 * (3 ** b)
  }
}